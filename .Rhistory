library(dplyr)
library(tidyr)
library(readxl)
library(ggplot2)
library(XML)
library(reshape2)
library(plyr)
library(tidyverse)
library(plotly)
vacunas_covid = read.csv("https://cloud.minsa.gob.pe/s/AC2adyLkHCKjmfm/download/positivos_covid.csv")
View(vacunas_covid)
vacunas_covid = read.csv("https://cloud.minsa.gob.pe/s/AC2adyLkHCKjmfm/download/positivos_covid.csv", sep=';')
View(vacunas_covid)
View(vacunas_covid)
clear
clr
colnames(vacuna_covid)
colnames(vacuna_covid)
colnames(vacunas_covid)
casos_covid = vacunas_covid
remove(vacunas_covid)
labels = data.frame(lab = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18),
eti = c('0-4','5-9','10-14','15-19','20-24','25-29','30-34','35-39','40-44','45-49','50-54','55-59','60-64','65-69','70-74','75-79','80+','SIN EDAD'))
View(labels)
View(casos_covid)
colnames(casos_covid)
nueva_base = ((casos_covid %>%
mutate(rango_edad = ifelse(EDAD >= 0 & EDAD <= 4, 1,
ifelse(EDAD >= 5 & EDAD <= 9, 2,
ifelse(EDAD >= 10 & EDAD <= 14, 3,
ifelse(EDAD >= 15 & EDAD <= 19, 4,
ifelse(EDAD >= 20 & EDAD <= 24, 5,
ifelse(EDAD >= 25 & EDAD <= 29, 6,
ifelse(EDAD >= 30 & EDAD <= 34, 7,
ifelse(EDAD >= 35 & EDAD <= 39, 8,
ifelse(EDAD >= 40 & EDAD <= 44, 9,
ifelse(EDAD >= 45 & EDAD <= 49, 10,
ifelse(EDAD >= 50 & EDAD <= 54, 11,
ifelse(EDAD >= 55 & EDAD <= 59, 12,
ifelse(EDAD >= 60 & EDAD <= 64, 13,
ifelse(EDAD >= 65 & EDAD <= 69, 14,
ifelse(EDAD >= 70 & EDAD <= 74, 15,
ifelse(EDAD >= 75 & EDAD <= 79, 16,
ifelse(EDAD >= 80, 17, 18))))))))))))))))))) %>%
mutate(rango_edad = replace_na(rango_edad,18))) %>%
mutate(rango_edad = factor(rango_edad,labels$lab,labels$eti))
View(nueva_base)
View(nueva_base)
nueva_base
head(nueva_base)
head(nueva_base)
str(nueva_base)
head(nueva_base %>% mutate(FECHA_CORTE = as.Date(as.character(FECHA_CORTE), format = '%Y%m%d')))
nueva_base = ((casos_covid %>%
mutate(rango_edad = ifelse(EDAD >= 0 & EDAD <= 4, 1,
ifelse(EDAD >= 5 & EDAD <= 9, 2,
ifelse(EDAD >= 10 & EDAD <= 14, 3,
ifelse(EDAD >= 15 & EDAD <= 19, 4,
ifelse(EDAD >= 20 & EDAD <= 24, 5,
ifelse(EDAD >= 25 & EDAD <= 29, 6,
ifelse(EDAD >= 30 & EDAD <= 34, 7,
ifelse(EDAD >= 35 & EDAD <= 39, 8,
ifelse(EDAD >= 40 & EDAD <= 44, 9,
ifelse(EDAD >= 45 & EDAD <= 49, 10,
ifelse(EDAD >= 50 & EDAD <= 54, 11,
ifelse(EDAD >= 55 & EDAD <= 59, 12,
ifelse(EDAD >= 60 & EDAD <= 64, 13,
ifelse(EDAD >= 65 & EDAD <= 69, 14,
ifelse(EDAD >= 70 & EDAD <= 74, 15,
ifelse(EDAD >= 75 & EDAD <= 79, 16,
ifelse(EDAD >= 80, 17, 18))))))))))))))))))) %>%
mutate(rango_edad = replace_na(rango_edad,18))) %>%
mutate(rango_edad = factor(rango_edad,labels$lab,labels$eti),
FECHA_CORTE = as.Date(as.character(FECHA_CORTE), format = '%Y%m%d'),
FECHA_RESULTADO = as.Date(as.character(FECHA_RESULTADO), format = '%Y%m%d'))
View(nueva_base)
source("C:/Users/mosqu/Escritorio/RSTUDIO/dashboard_covid/PROPORCIONES_VACUNADO.R")
write.csv(nueva_base, 'base_casos_covid.csv', row.names=F)
clr
colnames(nueva_base)
nueva_base = ((casos_covid %>%
mutate(rango_edad = ifelse(EDAD >= 0 & EDAD <= 4, 1,
ifelse(EDAD >= 5 & EDAD <= 9, 2,
ifelse(EDAD >= 10 & EDAD <= 14, 3,
ifelse(EDAD >= 15 & EDAD <= 19, 4,
ifelse(EDAD >= 20 & EDAD <= 24, 5,
ifelse(EDAD >= 25 & EDAD <= 29, 6,
ifelse(EDAD >= 30 & EDAD <= 34, 7,
ifelse(EDAD >= 35 & EDAD <= 39, 8,
ifelse(EDAD >= 40 & EDAD <= 44, 9,
ifelse(EDAD >= 45 & EDAD <= 49, 10,
ifelse(EDAD >= 50 & EDAD <= 54, 11,
ifelse(EDAD >= 55 & EDAD <= 59, 12,
ifelse(EDAD >= 60 & EDAD <= 64, 13,
ifelse(EDAD >= 65 & EDAD <= 69, 14,
ifelse(EDAD >= 70 & EDAD <= 74, 15,
ifelse(EDAD >= 75 & EDAD <= 79, 16,
ifelse(EDAD >= 80, 17, 18))))))))))))))))))) %>%
mutate(rango_edad = replace_na(rango_edad,18))) %>%
mutate(rango_edad = factor(rango_edad,labels$lab,labels$eti),
FECHA_CORTE = as.Date(as.character(FECHA_CORTE), format = '%Y%m%d'),
FECHA_RESULTADO = as.Date(as.character(FECHA_RESULTADO), format = '%Y%m%d')) %>%
group_by(-id_persona) %>%
summarise(cant_p = n(id_persona))
nueva_base = ((casos_covid %>%
mutate(rango_edad = ifelse(EDAD >= 0 & EDAD <= 4, 1,
ifelse(EDAD >= 5 & EDAD <= 9, 2,
ifelse(EDAD >= 10 & EDAD <= 14, 3,
ifelse(EDAD >= 15 & EDAD <= 19, 4,
ifelse(EDAD >= 20 & EDAD <= 24, 5,
ifelse(EDAD >= 25 & EDAD <= 29, 6,
ifelse(EDAD >= 30 & EDAD <= 34, 7,
ifelse(EDAD >= 35 & EDAD <= 39, 8,
ifelse(EDAD >= 40 & EDAD <= 44, 9,
ifelse(EDAD >= 45 & EDAD <= 49, 10,
ifelse(EDAD >= 50 & EDAD <= 54, 11,
ifelse(EDAD >= 55 & EDAD <= 59, 12,
ifelse(EDAD >= 60 & EDAD <= 64, 13,
ifelse(EDAD >= 65 & EDAD <= 69, 14,
ifelse(EDAD >= 70 & EDAD <= 74, 15,
ifelse(EDAD >= 75 & EDAD <= 79, 16,
ifelse(EDAD >= 80, 17, 18))))))))))))))))))) %>%
mutate(rango_edad = replace_na(rango_edad,18))) %>%
mutate(rango_edad = factor(rango_edad,labels$lab,labels$eti),
FECHA_CORTE = as.Date(as.character(FECHA_CORTE), format = '%Y%m%d'),
FECHA_RESULTADO = as.Date(as.character(FECHA_RESULTADO), format = '%Y%m%d')) %>%
group_by(-id_persona) %>%
summarise(cant_p = n())
View(nueva_base)
nueva_base = ((casos_covid %>%
mutate(rango_edad = ifelse(EDAD >= 0 & EDAD <= 4, 1,
ifelse(EDAD >= 5 & EDAD <= 9, 2,
ifelse(EDAD >= 10 & EDAD <= 14, 3,
ifelse(EDAD >= 15 & EDAD <= 19, 4,
ifelse(EDAD >= 20 & EDAD <= 24, 5,
ifelse(EDAD >= 25 & EDAD <= 29, 6,
ifelse(EDAD >= 30 & EDAD <= 34, 7,
ifelse(EDAD >= 35 & EDAD <= 39, 8,
ifelse(EDAD >= 40 & EDAD <= 44, 9,
ifelse(EDAD >= 45 & EDAD <= 49, 10,
ifelse(EDAD >= 50 & EDAD <= 54, 11,
ifelse(EDAD >= 55 & EDAD <= 59, 12,
ifelse(EDAD >= 60 & EDAD <= 64, 13,
ifelse(EDAD >= 65 & EDAD <= 69, 14,
ifelse(EDAD >= 70 & EDAD <= 74, 15,
ifelse(EDAD >= 75 & EDAD <= 79, 16,
ifelse(EDAD >= 80, 17, 18))))))))))))))))))) %>%
mutate(rango_edad = replace_na(rango_edad,18))) %>%
mutate(rango_edad = factor(rango_edad,labels$lab,labels$eti),
FECHA_CORTE = as.Date(as.character(FECHA_CORTE), format = '%Y%m%d'),
FECHA_RESULTADO = as.Date(as.character(FECHA_RESULTADO), format = '%Y%m%d')) %>%
group_by(across(c(-id_persona))) %>%
summarise(cant_p = n())
nueva_base = ((casos_covid %>%
mutate(rango_edad = ifelse(EDAD >= 0 & EDAD <= 4, 1,
ifelse(EDAD >= 5 & EDAD <= 9, 2,
ifelse(EDAD >= 10 & EDAD <= 14, 3,
ifelse(EDAD >= 15 & EDAD <= 19, 4,
ifelse(EDAD >= 20 & EDAD <= 24, 5,
ifelse(EDAD >= 25 & EDAD <= 29, 6,
ifelse(EDAD >= 30 & EDAD <= 34, 7,
ifelse(EDAD >= 35 & EDAD <= 39, 8,
ifelse(EDAD >= 40 & EDAD <= 44, 9,
ifelse(EDAD >= 45 & EDAD <= 49, 10,
ifelse(EDAD >= 50 & EDAD <= 54, 11,
ifelse(EDAD >= 55 & EDAD <= 59, 12,
ifelse(EDAD >= 60 & EDAD <= 64, 13,
ifelse(EDAD >= 65 & EDAD <= 69, 14,
ifelse(EDAD >= 70 & EDAD <= 74, 15,
ifelse(EDAD >= 75 & EDAD <= 79, 16,
ifelse(EDAD >= 80, 17, 18))))))))))))))))))) %>%
mutate(rango_edad = replace_na(rango_edad,18))) %>%
mutate(rango_edad = factor(rango_edad,labels$lab,labels$eti),
FECHA_CORTE = as.Date(as.character(FECHA_CORTE), format = '%Y%m%d'),
FECHA_RESULTADO = as.Date(as.character(FECHA_RESULTADO), format = '%Y%m%d')) %>%
group_by(across(c(-id_persona))) %>%
summarise(cant_p = n())
View(nueva_base)
nueva_base = ((casos_covid %>%
mutate(rango_edad = ifelse(EDAD >= 0 & EDAD <= 4, 1,
ifelse(EDAD >= 5 & EDAD <= 9, 2,
ifelse(EDAD >= 10 & EDAD <= 14, 3,
ifelse(EDAD >= 15 & EDAD <= 19, 4,
ifelse(EDAD >= 20 & EDAD <= 24, 5,
ifelse(EDAD >= 25 & EDAD <= 29, 6,
ifelse(EDAD >= 30 & EDAD <= 34, 7,
ifelse(EDAD >= 35 & EDAD <= 39, 8,
ifelse(EDAD >= 40 & EDAD <= 44, 9,
ifelse(EDAD >= 45 & EDAD <= 49, 10,
ifelse(EDAD >= 50 & EDAD <= 54, 11,
ifelse(EDAD >= 55 & EDAD <= 59, 12,
ifelse(EDAD >= 60 & EDAD <= 64, 13,
ifelse(EDAD >= 65 & EDAD <= 69, 14,
ifelse(EDAD >= 70 & EDAD <= 74, 15,
ifelse(EDAD >= 75 & EDAD <= 79, 16,
ifelse(EDAD >= 80, 17, 18))))))))))))))))))) %>%
mutate(rango_edad = replace_na(rango_edad,18))) %>%
mutate(rango_edad = factor(rango_edad,labels$lab,labels$eti),
FECHA_CORTE = as.Date(as.character(FECHA_CORTE), format = '%Y%m%d'),
FECHA_RESULTADO = as.Date(as.character(FECHA_RESULTADO), format = '%Y%m%d')) %>%
group_by(across(c(-id_persona,-EDAD))) %>%
summarise(cant_p = n())
View(nueva_base)
source("C:/Users/mosqu/Escritorio/RSTUDIO/dashboard_covid/PROPORCIONES_VACUNADO.R")
library(spotifyr) #API de Spotify
library(dplyr) #ordenamiento de bases
library(Hmisc) #estadísticas
setwd('C:/Users/mosqu/OneDrive/Escritorio/RSTUDIO') #directorio base
Sys.setenv(SPOTIFY_CLIENT_ID = '3f8718cf44964c5e88b5058c828e4626')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '89a1e4e2566944668bb90fed660bc5ab')
access_token <- get_spotify_access_token()
label = readline(prompt = 'Discográfica:')
dir_car = readline(prompt = 'Nombre de la carpeta:')
format(Sys.Date(),'%d'),
format(Sys.Date(),'%m'),
format(Sys.Date(),'%y')
)
library(spotifyr) #API de Spotify
library(dplyr) #ordenamiento de bases
library(Hmisc) #estadísticas
setwd('C:/Users/mosqu/OneDrive/Escritorio/RSTUDIO') #directorio base
Sys.setenv(SPOTIFY_CLIENT_ID = '3f8718cf44964c5e88b5058c828e4626')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '89a1e4e2566944668bb90fed660bc5ab')
access_token <- get_spotify_access_token()
label = readline(prompt = 'Discográfica:')
dir_car = readline(prompt = 'Nombre de la carpeta:')
vector_date = c(
format(Sys.Date(),'%d'),
format(Sys.Date(),'%m'),
format(Sys.Date(),'%y')
)
fn_id_artists = function(vec) {
pre_base_artist_0 = c()
for (x in vec) {
off = 0
t = 0
while (t == 0) {
call = get_label_artists(x, limit = 20, offset = off)
if (nrow(call) != 0) {
pre_base_artist_0 = c(pre_base_artist_0, c(id_artist = call[,3]))
off = off + 20
message(off)
} else {
t = 1
}
}
}
return(pre_base_artist_0)
}
fn_id_albums = function(vec) {
c = 0
list_ = vec
pre_base_albums_0 = c()
for (y in 1:length(list_)) {
for (x in c(list_[[y]])) {
off = 0
t = 0
while (t == 0) {
call = get_artist_albums(x, limit = 50, offset = off, include_groups = c("album", "single"))
if (is.null(nrow(call)) == F) {
pre_base_albums_0 = c(pre_base_albums_0, c(id_albums = call[,6]))
off = off + 50
} else {
t = 1
}
}
c = c + 1
message(c)
}
}
pre_base_albums_0 = split(pre_base_albums_0, ceiling(seq_along(pre_base_albums_0)/20))
return(pre_base_albums_0)
}
fn_id_tracks = function(vec) {
list_ = vec
pre_base_tracks_0 = c()
for (y in 1:length(list_)) {
for (x in c(list_[[y]])) {
pre_base_tracks_0 = c(pre_base_tracks_0, c(id_tracks = get_album_tracks(x, limit = 50)[,7]))
}
}
pre_base_tracks_0 = split(pre_base_tracks_0, ceiling(seq_along(pre_base_tracks_0)/50))
return(pre_base_tracks_0)
}
# creación de listas
listas = list(fn_id_artists(label),fn_id_albums(fn_id_artists(label)),fn_id_tracks(fn_id_albums(fn_id_artists(label))))
lista_bases = list(data.frame(),data.frame(),data.frame())
# Base de artistas
for (x in 1:length(listas[[1]])) {
lista_bases[[1]] =
rbind(lista_bases[[1]],
get_artists(listas[[1]][[x]]) %>%
tidyr::unnest(cols = 'images') %>%
group_by(id, name, popularity, type, followers.total, genres) %>%
filter(height == max(height)) %>%
mutate(fec = Sys.Date(),genres = paste(genres)) %>%
rename(name_artists = name, followers = followers.total, popularity_artists = popularity, id_artists = id, type_artists = type) %>%
select(id_artists, name_artists, popularity_artists, type_artists, followers, genres, url, fec)
)
}
# Base de albums
for (x in 1:length(listas[[2]])) {
lista_bases[[2]] =
rbind(lista_bases[[2]],
get_albums(listas[[2]][[x]]) %>%
tidyr::unnest(cols = 'images') %>%
group_by(id, name, type, popularity, release_date, available_markets, total_tracks, label, genres) %>%
filter(height == max(height)) %>%
mutate(fec = Sys.Date(),available_markets = paste(available_markets), genres = paste(genres)) %>%
rename(name_album = name, popularity_albums = popularity, type_album = type, id_album = id) %>%
select(id_album, name_album, type_album, popularity_albums, release_date, available_markets, total_tracks, label, genres, url, fec)
)
}
# Base de canciones
for (x in 1:length(listas[[3]])) {
lista_bases[[3]] =
rbind(lista_bases[[3]],
merge(
x = get_tracks(listas[[3]][[x]]) %>%
tidyr::unnest(cols = artists, name_sep = '.') %>%
mutate(fec = Sys.Date(),available_markets = paste(available_markets)) %>%
rename(id_track = id1, name_track = name1, id_artist = id, artist.name = name, popularity_track = popularity, id_album = album.id) %>%
select(id_track, name_track, duration_ms, popularity_track, id_album, id_artist, track_number, available_markets, explicit, is_local, fec),
y = get_track_audio_features(listas[[3]][[x]]) %>%
rename(id_track = id) %>%
select(id_track, danceability, energy, loudness, speechiness, acousticness, instrumentalness, liveness, valence,
tempo, time_signature, key, mode),
by = 'id_track',
all.x = T)
)
}
